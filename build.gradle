plugins {
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.sonarqube' version '3.0'
}

allprojects {
    group = 'com.ioglyph.modulo'
    version = new ProjectVersion(0, 0, 1, System.env.BUILD_IDENTIFIER).toString()

    ext {
        junitVersion = "5.4.2"
        jaxbVersion = "2.3.3"
    }
    ext['hikaricp.version'] = "3.4.3"

    repositories {
        mavenCentral()
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
        property "sonar.sourceEncoding", "UTF-8"
    }
}

configure(subprojects.findAll()) {
    apply plugin: 'java'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11
    targetCompatibility = 11

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
        testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    }

    dependencyManagement {
        // Note: Compilation currently fails when not using 2.3.4
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:2.3.4.RELEASE") }
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport { reports { xml.enabled true } }

    jar { archiveVersion = project.version }

    plugins.withType(JavaPlugin).configureEach {
        java {
            modularity.inferModulePath = true
        }
    }

    sonarqube {
        properties {
        }
    }
}

wrapper { gradleVersion = '6.6.1' }

class ProjectVersion {
    Integer major, minor, patch
    String build

    ProjectVersion(Integer major, Integer minor, Integer patch, String build){
        this.major = major
        this.minor = minor
        this.patch = patch
        this.build = build
    }

    @Override
    String toString() {
        return "$major.$minor.$patch" + (build ? ".$build" : "-SNAPSHOT")
    }
}

